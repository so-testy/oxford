{"version":3,"sources":["store/actions/index.js","store/constants/index.js","components/Constructor/Params/withRedux.js","components/Constructor/Params/index.js","components/Constructor/Questions/Filter/withRedux.js","components/Constructor/Questions/Filter/index.js","components/Constructor/Questions/Table/withRedux.js","components/Constructor/Questions/Table/index.js","components/Constructor/Questions/withRedux.js","components/Constructor/Questions/index.js","components/Constructor/Submit/index.js","components/Constructor/Submit/withRedux.js","pages/Constructor/index.js","components/Trainer/Navigation/withRedux.js","components/Trainer/Navigation/index.js","components/Trainer/Main/withRedux.js","components/Trainer/Main/index.js","pages/Trainer/withRedux.js","pages/Trainer/index.js","App.js","store/reducers/index.js","store/index.js","index.js"],"names":["changeConstructor","payload","type","changeTrainer","withRedux","Component","connect","constructor","dispatch","data","ConstructorParams","e","target","name","value","this","props","className","title","onChange","handleInputChange","bind","description","style","background","withRouter","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","maxWidth","complexity","classes","FormControl","InputLabel","id","Select","labelId","multiple","event","input","Input","renderValue","selected","join","map","MenuItem","key","Checkbox","checked","indexOf","ListItemText","primary","columns","align","getValue","currTask","isSelected","tasks","task","label","question","en","toUpperCase","root","width","React","useState","page","setPage","rowsPerPage","setRowsPerPage","useEffect","a","length","fetch","res","json","formattedTask","points","Paper","TableContainer","container","Table","stickyHeader","aria-label","TableHead","TableRow","column","TableCell","TableBody","filter","includes","slice","hover","role","tabIndex","TablePagination","rowsPerPageOptions","component","count","onChangePage","newPage","onChangeRowsPerPage","openEmailModal","setOpenEmailModal","openResultModal","setOpenResultModal","loading","setLoading","handleCloseEmailModal","handleCloseResultModal","handleSubmit","method","headers","body","JSON","stringify","testData","color","email","x","link","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","disabled","fullWidth","DialogActions","Button","onClick","href","variant","ConstructorPage","trainer","openCompleteModal","setOpenCompleteModal","openSuccessCompleteModal","setOpenSuccessCompleteModal","handleCloseCompleteModal","testName","testEmail","sender","userEmail","userName","sql","isSuccess","ButtonGroup","index","currTaskIndex","result","error","changeTask","backgroundColor","undefined","keepMounted","aria-describedby","openDatabaseModal","setOpenDatabaseModal","checkSQL","success","handleCloseDatabaseModal","multiline","rowsMax","Alert","severity","size","fields","field","rows","row","height","allowFullScreen","scrolling","frameBorder","src","dbId","database","getDatabaseFrameSrc","state","isLoading","params","match","test","Promise","all","taskId","setState","CircularProgress","App","exact","path","Constructor","Trainer","initialState","isOpenSubmitForm","reducer","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b2a6bf19.chunk.js","sourcesContent":["import * as types from '../constants/index'\n\nconst changeConstructor = payload => ({\n    type: types.CHANGE_CONSTRUCTOR,\n    payload\n});\n\nconst changeTrainer = payload => ({\n    type: types.CHANGE_TRAINER,\n    payload\n});\n\nexport {\n    changeConstructor,\n    changeTrainer\n}","export const CHANGE_CONSTRUCTOR = \"CHANGE_CONSTRUCTOR\";\nexport const CHANGE_TRAINER = \"CHANGE_TRAINER\";","import { connect } from 'react-redux';\nimport { changeConstructor } from '../../../store/actions/index';\n\nconst withRedux = Component => {\n\tconst mapStateToProps = ({ constructor }) => ({\n\t\tconstructor,\n\t});\n\n\tconst mapDispatchToProps = dispatch => ({\n\t\tchangeConstructor: data => dispatch(changeConstructor(data)),\n\t});\n\n\treturn connect(\n\t\tmapStateToProps,\n\t\tmapDispatchToProps,\n\t)(Component);\n};\n\nexport default withRedux;\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport './index.scss';\nimport withRedux from './withRedux';\n\nclass ConstructorParams extends Component {\n\n    handleInputChange(e) {\n        const { name, value } = e.target;\n        const { changeConstructor, constructor } = this.props;\n\n        changeConstructor({\n            ...constructor,\n            [name]: value\n        });\n    }\n\n    render() {\n        const { constructor } = this.props;\n\n        return (\n            <section className='constructor__params'>\n                <div className='about'>\n                    <div className='title'>\n                        <input \n                            type='text' \n                            name='title'\n                            value={constructor.title || ''} \n                            onChange={this.handleInputChange.bind(this)}\n                        />\n                    </div>\n                    <div className='description'>\n                        <input \n                            type='text'\n                            name='description'\n                            value={constructor.description || ''} \n                            onChange={this.handleInputChange.bind(this)} />\n                    </div>\n                </div>\n                <div className='color'>\n                    <button value='#6D6AFF' style={{background: '#6D6AFF'}}></button>\n                    <button value='#EBFF00' style={{background: '#EBFF00'}}></button>\n                    <button value='#FF6262' style={{background: '#FF6262'}}></button>\n                </div>\n            </section>)\n    }\n}\n\nexport default withRouter(withRedux(ConstructorParams));","import { connect } from 'react-redux';\nimport { changeConstructor } from '../../../../store/actions/index';\n\nconst withRedux = Component => {\n\tconst mapStateToProps = ({ constructor }) => ({\n\t\tconstructor,\n\t});\n\n\tconst mapDispatchToProps = dispatch => ({\n\t\tchangeConstructor: data => dispatch(changeConstructor(data)),\n\t});\n\n\treturn connect(\n\t\tmapStateToProps,\n\t\tmapDispatchToProps,\n\t)(Component);\n};\n\nexport default withRedux;\n","import React from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport withRedux from './withRedux';\nimport \"./index.scss\";\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 230,\n        maxWidth: 500,\n    }\n}));\n\nconst complexity = [\n    'HARD',\n    'MEDIUM',\n    'EASY'\n];\n\nconst type = [\n    'SELECT',\n    'UPDATE',\n    'DELETE',\n    'INSERT'\n];\n\nconst QuestionsFilter = props => {\n    const classes = useStyles();\n    const { constructor, changeConstructor } = props;\n\n    const handleChangeComplexity = (event) => {\n        changeConstructor({\n            ...constructor,\n            complexity: event.target.value\n        });\n    };\n\n    const handleChangeType = (event) => {\n        changeConstructor({\n            ...constructor,\n            type: event.target.value\n        });\n    };\n\n    return (\n        <div className=\"filters\">\n            <div className=\"complexity\">\n                <FormControl className={classes.formControl}>\n                    <InputLabel id=\"demo-mutiple-checkbox-label\">Complexity</InputLabel>\n                    <Select\n                        labelId=\"demo-mutiple-checkbox-label\"\n                        id=\"demo-mutiple-checkbox\"\n                        multiple\n                        value={constructor.complexity}\n                        onChange={handleChangeComplexity}\n                        input={<Input />}\n                        renderValue={(selected) => selected.join(', ')}\n                    >\n                        {complexity.map((name) => (\n                            <MenuItem key={name} value={name}>\n                                <Checkbox checked={constructor.complexity.indexOf(name) > -1} />\n                                <ListItemText primary={name} />\n                            </MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n            </div>\n            <div className=\"type\">\n                <FormControl className={classes.formControl}>\n                    <InputLabel id=\"demo-mutiple-checkbox-label\">Task types</InputLabel>\n                    <Select\n                        labelId=\"demo-mutiple-checkbox-label\"\n                        id=\"demo-mutiple-checkbox\"\n                        multiple\n                        value={constructor.type}\n                        onChange={handleChangeType}\n                        input={<Input />}\n                        renderValue={(selected) => selected.join(', ')}\n                    >\n                        {type.map((name) => (\n                            <MenuItem key={name} value={name}>\n                                <Checkbox checked={constructor.type.indexOf(name) > -1} />\n                                <ListItemText primary={name} />\n                            </MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n            </div>\n        </div>)\n}\n\nexport default withRedux(QuestionsFilter);","import { connect } from 'react-redux';\nimport { changeConstructor } from '../../../../store/actions/index';\n\nconst withRedux = Component => {\n\tconst mapStateToProps = ({ constructor }) => ({\n\t\tconstructor,\n\t});\n\n\tconst mapDispatchToProps = dispatch => ({\n\t\tchangeConstructor: data => dispatch(changeConstructor(data)),\n\t});\n\n\treturn connect(\n\t\tmapStateToProps,\n\t\tmapDispatchToProps,\n\t)(Component);\n};\n\nexport default withRedux;\n","import React, { useEffect } from \"react\";\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport withRedux from './withRedux';\nimport \"./index.scss\";\n\nconst columns = [\n    {\n        id: 'isSelected',\n        align: 'left',\n        getValue: (currTask, props) => (\n            <Checkbox\n                checked={currTask.isSelected}\n                onChange={() => {\n                    const { constructor, changeConstructor } = props;\n\n                    changeConstructor({\n                        ...constructor,\n                        tasks: constructor.tasks.map(task => {\n                            if (task.id === currTask.id) {\n                                task.isSelected = !task.isSelected;\n                            }\n                            return task;\n                        }),\n                    });\n                }}\n            />\n        ),\n    },\n    {\n        id: 'question',\n        label: 'Question',\n        minWidth: 400,\n        getValue: task => task.question.en,\n    },\n    {\n        id: 'type',\n        label: 'Type',\n        align: 'right',\n        minWidth: 40,\n        getValue: task => task.type.toUpperCase(),\n    },\n    {\n        id: 'complexity',\n        label: 'Complexity',\n        minWidth: 40,\n        align: 'right',\n        getValue: task => task.complexity.toUpperCase(),\n    }\n];\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n    }\n});\n\nconst QuestionsTable = (props) => {\n    const classes = useStyles();\n    const { constructor, changeConstructor } = props;\n\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    useEffect(() => {\n        (async () => {\n            if (constructor.tasks.length === 0) {\n                const res = await fetch('https://europe-west3-sgu-bot-evxyhp.cloudfunctions.net/questions');\n                const tasks = await res.json();\n                const formattedTask = tasks.map(task => ({\n                    ...task,\n                    isSelected: false,\n                    complexity: task.points > 3 ? task.points > 6 ? 'hard' : 'medium' : 'easy'\n                }));\n\n                changeConstructor({\n                    ...constructor,\n                    tasks: formattedTask,\n                });\n            }\n        })();\n    }, [constructor, changeConstructor])\n\n    return (\n        <div className=\"table\">\n            <Paper className={classes.root}>\n                <TableContainer className={classes.container}>\n                    <Table stickyHeader aria-label=\"sticky table\">\n                        <TableHead>\n                            <TableRow>\n                                {columns.map((column) => (\n                                    <TableCell\n                                        key={column.id}\n                                        align={column.align}\n                                        style={{ minWidth: column.minWidth }}\n                                    >\n                                        {column.label}\n                                    </TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {constructor.tasks.filter(task => {\n                                return constructor.type.includes(task.type.toUpperCase()) && \n                                    constructor.complexity.includes(task.complexity.toUpperCase())\n                            }).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(task => {\n                                return (\n                                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={task.id}>\n                                        {columns.map((column) => {\n                                            return (\n                                                <TableCell key={column.id} align={column.align}>\n                                                    {column.getValue(task, props)}\n                                                </TableCell>\n                                            );\n                                        })}\n                                    </TableRow>\n                                );\n                            })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 50]}\n                    component=\"div\"\n                    count={constructor.tasks.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </div>)\n}\n\nexport default withRedux(QuestionsTable);","import { connect } from 'react-redux';\nimport { changeConstructor } from '../../../store/actions/index';\n\nconst withRedux = Component => {\n\tconst mapStateToProps = ({ constructor }) => ({\n\t\tconstructor,\n\t});\n\n\tconst mapDispatchToProps = dispatch => ({\n\t\tchangeConstructor: data => dispatch(changeConstructor(data)),\n\t});\n\n\treturn connect(\n\t\tmapStateToProps,\n\t\tmapDispatchToProps,\n\t)(Component);\n};\n\nexport default withRedux;\n","import React from \"react\";\nimport QuestionsFilter from './Filter/index';\nimport QuestionTable from './Table/index';\n\nimport withRedux from './withRedux';\nimport \"./index.scss\";\n\nconst ConstructorQuestions = props => {\n\n    return (\n        <section className=\"constructor__questions\">\n            <QuestionsFilter />\n            <QuestionTable />\n        </section>)\n}\n\nexport default withRedux(ConstructorQuestions);","import React from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport './index.scss';\nimport withRedux from './withRedux';\n\nconst ConstructorSubmit = ({ constructor, changeConstructor }) => {\n    const [openEmailModal, setOpenEmailModal] = React.useState(false);\n    const [openResultModal, setOpenResultModal] = React.useState(false);\n\n    const [loading, setLoading] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpenEmailModal(true);\n    };\n\n    const handleCloseEmailModal = () => {\n        setOpenEmailModal(false);\n        setLoading(false);\n    };\n\n    const handleCloseResultModal = () => {\n        setOpenResultModal(false);\n    }\n\n    const handleInputChange = e => {\n        const { name, value } = e.target;\n\n        changeConstructor({\n            ...constructor,\n            [name]: value\n        });\n    }\n\n    const handleSubmit = async () => {\n        setLoading(true);\n        const res = await fetch('https://europe-west3-sgu-bot-evxyhp.cloudfunctions.net/createtest', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                testData: {\n                    color: constructor.color,\n                    email: constructor.email,\n                    title: constructor.title,\n                    description: constructor.description,\n                    tasks: constructor.tasks.filter(x => x.isSelected).map(x => x.id)\n                }\n            })\n        });\n        \n        const json = await res.json();\n\n        setLoading(false);\n        setOpenEmailModal(false);\n        setOpenResultModal(true);\n\n        changeConstructor({\n            ...constructor,\n            link: json.link,\n        });\n    };\n\n    return (\n        <>\n            <Dialog open={openEmailModal} onClose={handleCloseEmailModal} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Publish</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        For the results of passing the tests enter your email\n                    </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        label=\"Email Address\"\n                        type=\"email\"\n                        name=\"email\"\n                        value={constructor.email || ''}\n                        disabled={loading}\n                        onChange={handleInputChange}\n                        fullWidth\n                    />\n                </DialogContent>\n                <DialogActions>\n                    {\n                        loading ? \"\" : (\n                            <Button onClick={handleCloseEmailModal} color=\"primary\">\n                                Cancel\n                            </Button>\n                        )\n                    }\n                    <Button onClick={handleSubmit} disabled={loading} color=\"primary\">\n                        {\n                            loading ? \"Loading\" : \"Publish\"\n                        }\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            <Dialog open={openResultModal} onClose={handleCloseResultModal} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">\n                    Test published successfully\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Link to test: <a href={`http://localhost:3000/#/trainer/${constructor.link}`}>\n                            {`http://localhost:3000/#/trainer/${constructor.link}`}    \n                        </a>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleCloseResultModal} color=\"primary\">\n                        Cancel\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            <section className='constructor__submit'>\n                <div className=\"container\">\n                    <div className='title'>\n                        SELECTED {constructor.tasks.filter(x => x.isSelected).length} TASKS\n                </div>\n                    <div className='action'>\n                        <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n                            Publish test\n                        </Button>\n                    </div>\n                </div>\n            </section>\n        </>)\n\n}\n\nexport default withRedux(ConstructorSubmit);","import { connect } from 'react-redux';\nimport { changeConstructor } from '../../../store/actions/index';\n\nconst withRedux = Component => {\n\tconst mapStateToProps = ({ constructor }) => ({\n\t\tconstructor,\n\t});\n\n\tconst mapDispatchToProps = dispatch => ({\n\t\tchangeConstructor: data => dispatch(changeConstructor(data)),\n\t});\n\n\treturn connect(\n\t\tmapStateToProps,\n\t\tmapDispatchToProps,\n\t)(Component);\n};\n\nexport default withRedux;\n","import React, { Component } from \"react\";\n\nimport ConstructorParams from \"../../components/Constructor/Params/index\"\nimport ConstructorQuestions from \"../../components/Constructor/Questions/index\";\nimport ConstructorSubmit from \"../../components/Constructor/Submit/index\";\n\nimport \"./index.scss\";\n\nclass ConstructorPage extends Component {\n\n\trender() {\n\n\t\treturn (\n\t\t\t<div className=\"constructor\">\n\t\t\t\t<main>\n\t\t\t\t\t<ConstructorParams />\n\t\t\t\t\t<ConstructorQuestions />\n\t\t\t\t\t<ConstructorSubmit />\n\t\t\t\t</main>\n\t\t\t</div>)\n\t}\n}\n\nexport default ConstructorPage;\n","import { connect } from 'react-redux';\nimport { changeTrainer } from '../../../store/actions/index';\n\nconst withRedux = Component => {\n\tconst mapStateToProps = ({ trainer }) => ({\n\t\ttrainer,\n\t});\n\n\tconst mapDispatchToProps = dispatch => ({\n\t\tchangeTrainer: data => dispatch(changeTrainer(data)),\n\t});\n\n\treturn connect(\n\t\tmapStateToProps,\n\t\tmapDispatchToProps,\n\t)(Component);\n};\n\nexport default withRedux;\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport './index.scss';\nimport withRedux from './withRedux';\n\nconst TrainerNavigation = props => {\n\n    const { trainer, changeTrainer } = props;\n    const [openCompleteModal, setOpenCompleteModal] = React.useState(false);\n    const [openSuccessCompleteModal, setOpenSuccessCompleteModal] = React.useState(false);\n\n    const changeTask = (index) => {\n        changeTrainer({\n            ...trainer,\n            currTaskIndex: index,\n            result: null,\n            sql: \"\",\n            error: false,\n        })\n    }\n\n    const handleInputChange = e => {\n        const { name, value } = e.target;\n\n        changeTrainer({\n            ...trainer,\n            [name]: value\n        });\n    }\n\n    const handleOpenCompleteModal = () => {\n        setOpenCompleteModal(true)\n    }\n\n    const handleCloseCompleteModal = () => {\n        setOpenCompleteModal(false)\n    }\n\n    const handleCloseSuccessCompleteModal = () => {\n        setOpenSuccessCompleteModal(false)\n    }\n\n    const handleSubmit = async () => {\n        await fetch('https://europe-west3-sgu-bot-evxyhp.cloudfunctions.net/submit_test', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                testName: trainer.title,\n                testEmail: trainer.email,\n                sender: {\n                    email: trainer.userEmail,\n                    name: trainer.userName\n                },\n                tasks: trainer.tasks.map(task => ({\n                    id: task.id,\n                    sql: task.sql,\n                    isSuccess: task.isSuccess\n                }))\n            })\n        });\n        \n        setOpenCompleteModal(false);\n        setOpenSuccessCompleteModal(true);\n    }\n\n    return (\n        <section className='trainer__nav'>\n            <div className=\"tasks\">\n                <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n                    {\n                        trainer.tasks.map((task, index) => {\n                            return (\n                                <Button\n                                    disabled={trainer.currTaskIndex === index}\n                                    onClick={() => changeTask(index)}\n                                    style={{ backgroundColor: task.isSuccess ? \"green\" : undefined }}\n                                    key={index}>\n                                    {index + 1}\n                                </Button>\n                            )\n                        })}\n                </ButtonGroup>\n            </div>\n            <div className=\"complete\">\n                <Button onClick={handleOpenCompleteModal}>\n                    COMPLETE\n                </Button>\n            </div>\n            <Dialog open={openCompleteModal} onClose={handleCloseCompleteModal} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Complete</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Provide information about yourself before sending\n                    </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        label=\"Email Address\"\n                        type=\"email\"\n                        name=\"userEmail\"\n                        value={trainer.userEmail || ''}\n                        onChange={handleInputChange}\n                        fullWidth\n                    />\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        label=\"Your name\"\n                        type=\"text\"\n                        name=\"userName\"\n                        value={trainer.userName || ''}\n                        onChange={handleInputChange}\n                        fullWidth\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleCloseCompleteModal} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleSubmit} color=\"primary\">\n                        Complete\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <Dialog\n                open={openSuccessCompleteModal}\n                keepMounted\n                onClose={handleCloseSuccessCompleteModal}\n                aria-labelledby=\"alert-dialog-slide-title\"\n                aria-describedby=\"alert-dialog-slide-description\"\n            >\n                <DialogTitle id=\"alert-dialog-slide-title\">THANK!</DialogTitle>\n                <DialogContent>\n                <DialogContentText id=\"alert-dialog-slide-description\">\n                    Your solution has been sent successfully!\n                </DialogContentText>\n                </DialogContent>\n            </Dialog>\n        </section>)\n\n}\n\nexport default withRouter(withRedux(TrainerNavigation));","import { connect } from 'react-redux';\nimport { changeTrainer } from '../../../store/actions/index';\n\nconst withRedux = Component => {\n\tconst mapStateToProps = ({ trainer }) => ({\n\t\ttrainer,\n\t});\n\n\tconst mapDispatchToProps = dispatch => ({\n\t\tchangeTrainer: data => dispatch(changeTrainer(data)),\n\t});\n\n\treturn connect(\n\t\tmapStateToProps,\n\t\tmapDispatchToProps,\n\t)(Component);\n};\n\nexport default withRedux;\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Alert from '@material-ui/lab/Alert';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport './index.scss';\nimport withRedux from './withRedux';\n\nconst TrainerMain = props => {\n\n    const { trainer, changeTrainer } = props;\n    const [openDatabaseModal, setOpenDatabaseModal] = React.useState(false);\n\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n\n        changeTrainer({\n            ...trainer,\n            [name]: value\n        });\n    }\n\n    const checkSQL = async () => {\n        // forget resul previous request\n        changeTrainer({\n            ...trainer,\n            result: null,\n            error: false\n        });\n\n\n        const res = await fetch('https://europe-west3-sgu-bot-evxyhp.cloudfunctions.net/check', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                id: trainer.tasks[trainer.currTaskIndex].id,\n                sql: trainer.sql\n            })\n        });\n        const result = await res.json();\n        changeTrainer({\n            ...trainer,\n            result: result.body,\n        });\n\n        if (result.body) {\n            if (result.body.success) {\n                changeTrainer({\n                    ...trainer,\n                    tasks: trainer.tasks.map((task, index) => {\n                        if (index === trainer.currTaskIndex) {\n                            return {\n                                ...task,\n                                sql: trainer.sql,\n                                isSuccess: true\n                            }\n                        } else return task\n                    }),\n                    result: result.body,\n                });\n            }\n        } else {\n            changeTrainer({\n                ...trainer,\n                result: null,\n                error: true\n            });\n        }\n    }\n\n    const handleOpenDatabase = () => {\n        setOpenDatabaseModal(true);\n    }\n\n    const handleCloseDatabaseModal = () => {\n        setOpenDatabaseModal(false);\n    }\n\n    const getDatabaseFrameSrc = () => {\n        const dbIdNameMap = {\n            \"4ed2b809d7446b9a0e100001\": \"airo\",\n            \"4ed2b809d7446b9a0e100002\": \"family\",\n            \"4ed2b809d7446b9a0e100003\": \"schedule\",\n        }\n        const dbId = trainer.tasks[trainer.currTaskIndex].database;\n        return `https://drawsql.app/sql-academy-1/diagrams/${dbIdNameMap[dbId]}/embed`\n    }\n\n    return (\n        <section className='trainer__main'>\n            <div className=\"info\">\n                <div className='question'>\n                    <div className='title'>\n                        TASK\n                    </div>\n                    <div className='text'>\n                        {trainer.tasks[trainer.currTaskIndex] && trainer.tasks[trainer.currTaskIndex].question.en}\n                    </div>\n                </div>\n                <div className=\"database\">\n                    <Button onClick={handleOpenDatabase} color=\"primary\">\n                        SHOW DATABASE\n                    </Button>\n                </div>\n            </div>\n\n            <div className=\"decision\">\n                <div className=\"textarea\">\n                    <TextField\n                        id=\"outlined-multiline-flexible\"\n                        label=\"Multiline\"\n                        multiline\n                        rowsMax={4}\n                        name=\"sql\"\n                        value={trainer.sql}\n                        onChange={handleInputChange}\n                        style={{\n                            width: '100%'\n                        }}\n                        variant=\"outlined\"\n                    />\n                </div>\n                <div className=\"actions\">\n                    <Button variant=\"outlined\" color=\"primary\" onClick={checkSQL}>\n                        Submit\n                    </Button>\n                </div>\n                <div className=\"table\">\n                    {trainer.result ? trainer.result.success ? (\n                        <Alert severity=\"success\">Correct answer</Alert>\n                    ) : <Alert severity=\"warning\">Answer is not correct</Alert> : ''}\n                    {trainer.error ? <Alert severity=\"error\">Execution error</Alert> : \"\"}\n                    {trainer.result ? (\n                        <TableContainer component={Paper}>\n                            <Table size=\"small\" aria-label=\"a dense table\">\n                                <TableHead>\n                                    <TableRow>\n                                        {\n                                            trainer.result.fields.map(field => (\n                                                <TableCell align=\"right\">{field}</TableCell>\n                                            ))\n                                        }\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {trainer.result.rows.map((row) => (\n                                        <TableRow key={row.id}>\n                                            {\n                                                trainer.result.fields.map(field => (\n                                                    <TableCell align=\"right\">{row[field]}</TableCell>\n                                                ))\n                                            }\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    ) : \"\"}\n                </div>\n            </div>\n            <Dialog\n                open={openDatabaseModal}\n                maxWidth={\"lg\"}\n                fullWidth={true}\n                onClose={handleCloseDatabaseModal}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">Database</DialogTitle>\n                <DialogContent >\n                    <iframe \n                        width=\"100%\" \n                        height=\"600px\"\n\t\t\t\t\t\tallowFullScreen={true} \n\t\t\t\t\t\tscrolling=\"no\" \n\t\t\t\t\t\ttitle={`Database`} \n\t\t\t\t\t    frameBorder=\"0\"\n\t\t\t\t\t\tsrc={getDatabaseFrameSrc()} \n\t\t\t\t\t/>\n                </DialogContent>\n                <DialogActions>\n                <Button onClick={handleCloseDatabaseModal} color=\"primary\" autoFocus>\n                    Close\n                </Button>\n                </DialogActions>\n            </Dialog>\n        </section>)\n\n}\n\nexport default withRouter(withRedux(TrainerMain));","import { connect } from 'react-redux';\nimport { changeTrainer } from '../../store/actions/index';\n\nconst withRedux = Component => {\n\tconst mapStateToProps = ({ trainer }) => ({\n\t\ttrainer,\n\t});\n\n\tconst mapDispatchToProps = dispatch => ({\n\t\tchangeTrainer: data => dispatch(changeTrainer(data)),\n\t});\n\n\treturn connect(\n\t\tmapStateToProps,\n\t\tmapDispatchToProps,\n\t)(Component);\n};\n\nexport default withRedux;\n","import React, { Component } from \"react\";\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport TrainerNavigation from \"../../components/Trainer/Navigation/index\";\nimport TrainerMain from \"../../components/Trainer/Main/index\";\n\nimport withRedux from './withRedux';\nimport \"./index.scss\";\n\nclass TrainerPage extends Component {\n    state = {\n        isLoading: true\n    }\n\n    async componentWillMount() {\n        const { match: { params }, changeTrainer } = this.props;\n\n        const res = await fetch(`https://europe-west3-sgu-bot-evxyhp.cloudfunctions.net/test?id=${params.id}`);\n        const test = await res.json();\n        \n        const tasks = await Promise.all(test.tasks.map(async (taskId) => {\n            const res = await fetch(`https://europe-west3-sgu-bot-evxyhp.cloudfunctions.net/question?id=${taskId}`);\n            return await res.json();\n        }));\n        \n        changeTrainer({\n            ...test,\n            tasks: tasks.map(x => x[0]),\n            currTaskIndex: 0\n        });\n\n        this.setState({\n            isLoading: false\n        });\n    }\n\n\trender() {\n\n\t\treturn (\n\t\t\t<div className=\"trainer\">\n                <main>\n                    {\n                        this.state.isLoading ? (\n                            <div className=\"loading\">\n                                <CircularProgress />\n                            </div>\n                        ) : (\n                            <>\n                                <TrainerNavigation />\n                                <TrainerMain />\n                            </>\n                        )\n                    }\n                </main>\n\t\t\t</div>)\n\t}\n}\n\nexport default withRedux(TrainerPage);\n","import React from 'react';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nimport Constructor from \"./pages/Constructor/index\";\nimport Trainer from \"./pages/Trainer/index\";\n\nimport './App.scss'\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={Constructor} />\n        <Route path=\"/trainer/:id\" component={Trainer} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import * as types from '../constants/index';\n\nconst initialState = {\n    constructor: {\n        title: \"Test name\",\n        description: \"Type the test description\",\n        complexity: ['HARD', 'MEDIUM', 'EASY'],\n        type: ['SELECT', 'UPDATE', 'DELETE', 'INSERT'],\n        tasks: [],\n        isOpenSubmitForm: false,\n        link: ''\n    },\n    trainer: {\n        tasks: [],\n        sql: ''\n    }\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case types.CHANGE_CONSTRUCTOR:\n            return {\n                ...state,\n                constructor: action.payload\n            };\n\n        case types.CHANGE_TRAINER:\n            return {\n                ...state,\n                trainer: action.payload\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default reducer;","import thunk from 'redux-thunk';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport reducer from './reducers';\n\nconst store = createStore(\n    reducer,\n    composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport  default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport { Provider } from 'react-redux'\nimport store from './store/index';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n"],"sourceRoot":""}